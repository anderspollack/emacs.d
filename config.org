* Overview
  this is an attempt to use literate programming style to organize and annotate my emacs config. Configuration code is stored in org-mode source blocks. To quickly insert a source block, type "<s" then tab. Type C-c C-c to execute a block. To edit a source block, type C-c '. Type C-c ' again to finish editing.
  
* Server
  enable emacs server
  #+begin_src emacs-lisp
    (server-start)
  #+end_src
  
* Garbage Collection
  #+begin_src emacs-lisp
    (defun my-minibuffer-setup-hook ()
      (setq gc-cons-threshold most-positive-fixnum))

    (defun my-minibuffer-exit-hook ()
      (setq gc-cons-threshold 800000))

    (add-hook 'minibuffer-setup-hook #'my-minibuffer-setup-hook)
    (add-hook 'minibuffer-exit-hook #'my-minibuffer-exit-hook)
  #+end_src

* Mac Keyboard Modifiers
  Set command as Meta, use right option as alt
  #+begin_src emacs-lisp
    (when (eq system-type 'darwin)
      ;; use all the special keys on the mac keyboard
      (setq mac-option-modifier nil
            ns-function-modifier 'super
            mac-right-command-modifie 'hyper
            mac-right-option-modifier 'alt
            mac-command-modifier 'meta))
  #+end_src
  
* Terminal accessibility
** Terminal mouse scrolling
   enable mouse scrolling in terminal emacs
   #+begin_src emacs-lisp
     (if (not (window-system))
         (global-set-key (kbd "<mouse-5>") 'scroll-up-line))
     (if (not (window-system))
         (global-set-key (kbd "<mouse-4>") 'scroll-down-line))
   #+end_src

** Terminal pasting
   set C-y to paste in term-mode
   #+begin_src emacs-lisp
     (add-hook 'term-mode-hook
               (lambda ()
                 (define-key term-raw-map (kbd "C-y") 'term-paste)))
   #+end_src
   
* Visual settings
** Theme 
   add solarized theme
   #+begin_src emacs-lisp
     (use-package solarized-theme
       :ensure t
       :config
       (setq x-underline-at-descent-line t))
   #+end_src   

** Default frame
   set initial frame placement, and default frame padding / dimensions
   #+begin_src emacs-lisp
     (setq initial-frame-alist
           (append (list '(width . 206)
                         '(height . 66)
                         '(top . 0)
                         '(left . 0))))

     (setq default-frame-alist
           (append (list '(width  . 80)
                         '(height . 56)
                         '(top . 50)
                         '(left . 30)
                         '(vertical-scroll-bars . nil)
                         '(internal-border-width . 5)
                         '(ns-transparent-titlebar . t))))
     (set-frame-parameter
      (selected-frame) 'internal-border-width 5)
   #+end_src 

** Title Bar
   make the title bar show the current file path
   #+begin_src emacs-lisp
     (setq frame-title-format
           (list (format "%s %%S: %%j " (system-name))
                 '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))
   #+end_src

** Mouse color
   #+begin_src emacs-lisp
     (set-mouse-color "#000000")
   #+end_src

** Indentation
   2-space indent
   #+begin_src emacs-lisp
     (setq-default indent-tabs-mode nil)
     (setq-default tab-width 2)
     (setq indent-line-function 'insert-tab)
   #+end_src

** Mixed font styles
   set text-mode to use variable-width fonts
   #+begin_src emacs-lisp
     (add-hook 'text-mode-hook
               (lambda ()
                 (variable-pitch-mode 1)))
   #+end_src

** Line Numbers
   #+begin_src emacs-lisp
     (add-hook 'prog-mode-hook 'display-line-numbers-mode)
   #+end_src

* Package customizations
** javascript-mode
   set javascript indentation to 2
   #+begin_src emacs-lisp
     (setq js-indent-level 2)
   #+end_src

** magit
   #+begin_src emacs-lisp
     (use-package magit
       :ensure t
       :config
       (global-set-key (kbd "C-x g") 'magit-status)
       (define-key transient-map [escape] 'transient-quit-one))
   #+end_src

** evil-mode
   - setup evil-mode, 
   - set magit commit messages to open in insert state https://emacs.stackexchange.com/questions/14008/default-magit-commit-state-in-evil
   - setup evil-leader, evil-surround, evil-magit, evil-org, evil-collection
   #+begin_src emacs-lisp
     (use-package evil
       :ensure t
       :init
       (setq evil-search-module 'evil-search)
       (setq evil-ex-complete-emacs-commands nil)
       (setq evil-want-C-d-scroll t)
       (setq evil-want-keybinding nil)
       (setq evil-want-fine-undo t)
       (setq evil-want-C-u-delete t)
       :config
       (evil-mode 1)
       (setq evil-default-state 'emacs)
       (evil-set-initial-state 'shell-mode 'emacs)
       (evil-set-initial-state 'eshell-mode 'emacs)
       (evil-set-initial-state 'term-mode 'emacs)
       ;; set magit commit messages to open in insert state https://emacs.stackexchange.com/questions/14008/default-magit-commit-state-in-evil
       ;; (add-hook 'with-editor-mode-hook 'evil-insert-state)
       ;; set C-y to paste text in insert mode -- uses evil-paste-before + right-char instead of yank to make pasting in the terminal work
       (define-key evil-insert-state-map (kbd "C-y") (lambda ()
                                                       (interactive)
                                                       (evil-paste-before 1)
                                                       (right-char 1)))
       ;; set C-d to delete text in insert mode, like emacs + readline
       (define-key evil-insert-state-map (kbd "C-d") 'delete-char)
       ;; remap all evil movement functions to use visual lines instead of actual lines
       (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
       (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
       ;; Make horizontal movement cross lines
       (setq-default evil-cross-lines t)
       ;; set RETURN to open links in org-mode
       (add-hook 'org-mode-hook (lambda ()
                                  (define-key evil-normal-state-map (kbd "RET") 'org-open-at-point)))
       )

     ;; (use-package evil-leader
     ;;   :after evil
     ;;   :ensure t
     ;;   :config
     ;;   (global-evil-leader-mode t)
     ;;   (evil-leader/set-leader "<SPC>")
     ;;   (evil-leader/set-key
     ;;     "f" 'find-file
     ;;     "b" 'switch-to-buffer
     ;;     "d" 'dired
     ;;     "s" 'save-buffer
     ;;     "1" 'delete-other-windows
     ;;     "2" 'evil-window-split
     ;;     "3" 'evil-window-vsplit
     ;;     "0" (lambda ()
     ;;           (interactive)
     ;;           (delete-window))
     ;;     "=" 'balance-windows
     ;;     "o" 'other-frame
     ;;     "h" 'windmove-left
     ;;     "j" 'windmove-down
     ;;     "k" 'windmove-up
     ;;     "l" 'windmove-right
     ;;     "m" 'maximize-window
     ;;     "M" 'toggle-frame-fullscreen
     ;;     "n" 'make-frame
     ;;     "w" 'delete-frame
     ;;     "r" (lambda ()
     ;;           "if the current buffer is web-mode, run web-mode-reload, otherwise run font-lock-fontify-buffer"
     ;;           (interactive)
     ;;           (if (string= (symbol-value 'major-mode) "web-mode")
     ;;               (web-mode-reload)
     ;;             (font-lock-fontify-buffer)))
     ;;     "e" 'eshell
     ;;     "t" 'ansi-term
     ;;     "g" 'magit-status
     ;;     "u" 'undo-tree-visualize
     ;;     ;; make SPC-SPC enlarge the current window in both dimensions. NOTE: annoying on a butterfly keyboard macbook, great otherwise
     ;;     ;; "SPC" 'maximize-window
     ;;     "%" 'query-replace
     ;;     "!" 'shell-command
     ;;     "x" 'execute-extended-command
     ;;     "<left>" 'winner-undo
     ;;     "<right>" 'winner-redo
     ;;     )
     ;;   ;; set SPC-' to toggle editing of org-src blocks
     ;;   (evil-leader/set-key "'" 'org-edit-src-exit)
     ;;   (evil-leader/set-key-for-mode 'org-mode "'" 'org-edit-special)

     ;;   ;; set SPC-SPC to move forward in info mode
     ;;   (evil-leader/set-key-for-mode 'info-mode "SPC" 'Info-scroll-up)
     ;;   )

     ;; (use-package evil-surround
     ;;   :after evil
     ;;   :ensure t
     ;;   :config
     ;;   (global-evil-surround-mode t))

     ;; (use-package evil-magit
     ;;   :after evil
     ;;   :ensure t
     ;;   :config
     ;;   (global-evil-surround-mode t))

     ;; (use-package evil-org
     ;;   :after evil
     ;;   :ensure t
     ;;   :after org
     ;;   :config
     ;;   (add-hook 'org-mode-hook 'evil-org-mode)
     ;;   (add-hook 'evil-org-mode-hook
     ;;             (lambda ()
     ;;               (evil-org-set-key-theme)))
     ;;   (require 'evil-org-agenda)
     ;;   (evil-org-agenda-set-keys))

     ;; (use-package evil-collection
     ;;   :after evil
     ;;   :ensure t
     ;;   :config
     ;;   (evil-collection-init))
   #+end_src

** company-mode
   use company autocomplete in all buffers
   #+begin_src emacs-lisp
     (use-package company
       :ensure t)
   #+end_src
   
** web-mode
   #+begin_src emacs-lisp
     (use-package web-mode
       :ensure t
       :config
       (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.tag\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.liquid\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode))
       (add-to-list 'auto-mode-alist '("\\.json\\'" . web-mode))
       (setq web-mode-engines-alist
             '(("riot" . "\\.tag\\'")
               ("liquid" . "\\.liquid\\'")))

       (setq web-mode-content-types-alist
               '(("css" . "\\.scss.liquid\\'")
               ("liquid" . "\\.liquid\\'")))

       ;; set indentation level to 2/4 for html/markup
       (setq web-mode-markup-indent-offset 2)
       (setq web-mode-css-indent-offset 2)
       (setq web-mode-code-indent-offset 2)
       (setq web-mode-style-padding 0)
       (setq web-mode-script-padding 0)

       ;; enable jsdoc-style comments
       (setq web-mode-enable-comment-annotation t)

       ;; disable electric pair mode in web mode for liquid files
       (add-hook 'web-mode-hook
                 (lambda () (if (equal (file-name-extension(buffer-file-name))
                                       "liquid")
                                (electric-pair-local-mode -1)))))
   #+end_src

** emmet-mode
   #+begin_src emacs-lisp
     (use-package emmet-mode
       :ensure t
       :config
       ;; Auto-start on any markup modes
       (add-hook 'sgml-mode-hook 'emmet-mode)
       (add-hook 'html-mode-hook 'emmet-mode)
       (add-hook 'css-mode-hook  'emmet-mode)
       (add-hook 'markdown-mode-hook  'emmet-mode)
       ;; enable emmet mode whenever web-mode is active
       (add-hook 'web-mode-hook 'emmet-mode)
       ;; enable emmet mode whenever javascript-mode is active
       (add-hook 'js-mode-hook 'emmet-mode))
   #+end_src

** lsp-mode
   setup for language server protocol
   #+begin_src emacs-lisp
     (use-package lsp-mode
       :ensure t
       :init
       ;; set prefix for all lsp commands as C-c l
       (setq lsp-keymap-prefix "C-c l")
       :hook
       ;; deferred startup for lsp until a web-mode buffer is opened
       (web-mode . lsp-deferred)
       (js-mode . lsp-deferred)
       ;; enable which-key integration
       (lsp-mode . lsp-enable-which-key-integration)
       :commands
       (lsp lsp-deferred))

     (use-package lsp-ui
       :ensure t
       :commands lsp-ui-mode)

     (use-package company-lsp
       :ensure t
       :commands company-lsp)
   #+end_src

** prettier-js
   #+begin_src emacs-lisp
     (use-package prettier-js
       :ensure t
       :config
       (add-hook 'js-mode-hook 'prettier-js-mode)
       (add-hook 'web-mode-hook 'prettier-js-mode))
   #+end_src

** which-key
   #+begin_src emacs-lisp
     (use-package which-key
       :ensure t
       :config
       (setq which-key-mode t))
   #+end_src

** yaml-mode
   #+begin_src emacs-lisp
     (use-package yaml-mode
       :ensure t
       :config
       (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
   #+end_src

** haskell/tidal
   full install instructions here: https://tidalcycles.org/index.php/MacOS_installation
   
   setup haskell/tidal
   #+begin_src emacs-lisp
     (setq load-path (cons "~/.emacs.d/tidal/" load-path))
     (use-package haskell-mode
       :ensure t)
     (use-package tidal
       :ensure t
       :config
       ;; (setq tidal-interpreter "/usr/local/bin/ghci")
       )
   #+end_src

** powerline
   #+begin_src emacs-lisp
     (use-package powerline
       :ensure t
       :config
       (powerline-center-evil-theme))
   #+end_src

** ace-window
   #+begin_src emacs-lisp
     (use-package ace-window
       :ensure t
       :config
       (global-set-key (kbd "M-o") 'ace-window))
   #+end_src

** avy
   #+begin_src emacs-lisp
     (use-package avy
       :ensure t
       :config
       (global-set-key (kbd "C-;") 'avy-goto-char)
       (global-set-key (kbd "C-'") 'avy-goto-char-2))
   #+end_src

** treemacs
   #+begin_src emacs-lisp
     (use-package treemacs
       :ensure t
       :config
       (global-set-key (kbd "C-=") 'treemacs))
   #+end_src

** keyfreq
   use ~keyfreq-show~ to see often I've used a command
   #+begin_src emacs-lisp
     (use-package keyfreq
       :ensure t
       :config
       (keyfreq-mode 1)
       (keyfreq-autosave-mode 1)
       (setq keyfreq-excluded-commands
           '(self-insert-command
             forward-char
             backward-char
             previous-line
             next-line)))
   #+end_src

* Keybindings
  make M-j/k increase/decrease the size of the current window
  #+begin_src emacs-lisp
    ;; (global-set-key (kbd "M-J")
    ;;                 (lambda ()
    ;;                   (interactive)
    ;;                   (evil-window-increase-height 1)
    ;;                   (evil-window-increase-width 3)
    ;;                   ))

    ;; (global-set-key (kbd "M-K")
    ;;                 (lambda ()
    ;;                   (interactive)
    ;;                   (evil-window-decrease-height 1)
    ;;                   (evil-window-decrease-width 3)
    ;;                   ))
  #+end_src

  set ESC to quit in minibuffer
  #+begin_src emacs-lisp
    ;; (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
    ;; (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
    ;; (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
    ;; (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
    ;; (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
  #+end_src
o  
  set M-`  to switch between frames, MacOS-style
  #+begin_src emacs-lisp
    (global-set-key (kbd "M-`") 'other-frame)
  #+end_src

  make M-z ~zap-up-to-char~ instead of ~zap-to-char~
  #+begin_src emacs-lisp
    (global-set-key (kbd "M-z") 'zap-up-to-char)
  #+end_src
  
  set up M-c and M-v so they can be used for copy/paste, M-z for undo:
  #+begin_src emacs-lisp
    ;; (global-set-key (kbd "M-c") 'kill-ring-save)
    ;; (global-set-key (kbd "M-v") 'yank)
    ;; (global-set-key (kbd "M-z") 'undo-tree-undo)
  #+end_src

* Miscellaneous Behavior
** dired
   hide dired details by default. Show details with "(". Sort with "s"
   #+begin_src emacs-lisp
     (add-hook 'dired-mode-hook
               (lambda ()
                 (dired-hide-details-mode)
                 (dired-sort-toggle-or-edit)))
   #+end_src

   suppress "ls does not support --dired"
   #+begin_src emacs-lisp
     (when (string= system-type "darwin")
       (setq dired-use-ls-dired nil))
   #+end_src

   #+RESULTS:
   
** default find-file directory
   #+begin_src emacs-lisp
     (setq default-directory "~/")
   #+end_src

** eshell tab completion
   Make eshell tab completion behave like Bash
   #+begin_src emacs-lisp
     (add-hook
      'eshell-mode-hook
      (lambda ()
        (setq pcomplete-cycle-completions nil)))
   #+end_src

** alias y/n for prompts
   #+begin_src emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+end_src
   
** imenu
   set M-i as keyboard shortcut for imenu, instead of tab-to-tab-stop
   #+begin_src emacs-lisp
     (global-set-key (kbd "M-i") 'imenu)
   #+end_src

** Backup files
   make all backup files live in .emacs.d/backup
   #+begin_src emacs-lisp
     (setq backup-directory-alist '(("." . "~/.emacs.d/backup")))
   #+end_src

* Custom file
  sets customizer to save settings to custom.el
  #+begin_src emacs-lisp
    (setq custom-file "~/.emacs.d/custom.el")
    (load custom-file)
  #+end_src
   
* Notes
  see [[./notes.org]]
